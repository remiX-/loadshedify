AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31

Description: serverless-discord-bot

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Tracing: Active # Enables AWS X Ray

Parameters:
  AppIdentifier:
    Type: String
    Description: Primary identifier for this app, used for naming purposes
  Environment:
    Type: String
    Description: Stage Name used in API GW
  EspAuthToken:
    Type: String
    Description: Auth Token required for EskomSePush Business API 2.0

Resources:
  #####################
  #     Storage
  #####################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub "${AppIdentifier}v2-${Environment}"
      Tags:
        - Key: Project
          Value: !Ref AppIdentifier
        - Key: Environment
          Value: !Ref Environment

  MainSNSTopic:
    Type: AWS::SNS::Topic

  proxyGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      MethodSettings:
        - ResourcePath: /
          HttpMethod: ANY

  DiscordBotProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-DiscordBotProxy
      PackageType: Zip
      CodeUri: src/Proxy/Core/Proxy.BotHandler
      Handler: Proxy.BotHandler::Proxy.BotHandler.BotProxyFunction::FunctionHandler
      Runtime: dotnet6
      Description: A Lambda function that returns a static string.
      Policies:
        - AWSLambdaBasicExecutionRole
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MainSNSTopic.TopicName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref proxyGateway
      Environment:
        Variables:
          DEBUG_ENABLED: true
          TOPIC_ARN: !Ref MainSNSTopic
          PUBLIC_KEY: ba19504c256c91e3956390a115182e3a6e82f8d2e00044575fdd59821af6264d

  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Search
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Search/
      Handler: Proxy.Command.Search::Proxy.Command.SearchFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - search
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  ScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Schedule
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Schedule/
      Handler: Proxy.Command.Schedule::Proxy.Command.ScheduleFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - schedule
                - schedulesim
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Status
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Status/
      Handler: Proxy.Command.Status::Proxy.Command.StatusFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - status
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  SubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Subscribe
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Subscribe/
      Handler: Proxy.Command.Subscribe::Proxy.Command.SubscribeFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - subscribe
                - sub
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

Outputs:
  ProxyGWEndpoint:
    Description: API Gateway endpoint URL to pass to Discord Application Portal
    Value: !Sub https://${proxyGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
