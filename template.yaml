AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31

Description: serverless-discord-bot

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Tracing: Active # Enables AWS X Ray

Parameters:
  AppIdentifier:
    Type: String
    Description: Primary identifier for this app, used for naming purposes
  Environment:
    Type: String
    Description: Stage Name used in API GW
  BotPublicKey:
    Type: String
    Description: Public Key for Discord Bot
  BotToken:
    Type: String
    Description: Bot Token for Discord Bot
  EspAuthToken:
    Type: String
    Description: Auth Token required for EskomSePush Business API 2.0

Resources:
  #####################
  #     Storage
  #####################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub ${AppIdentifier}-${Environment}
      Tags:
        - Key: Project
          Value: !Ref AppIdentifier
        - Key: Environment
          Value: !Ref Environment

  #####################
  #     DynamoDB
  #####################
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: Subscriptions
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  MainSNSTopic:
    Type: AWS::SNS::Topic

  #####################
  #     API & Bot Proxy
  #####################
  ProxyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      MethodSettings:
        - ResourcePath: /
          HttpMethod: POST

  DiscordBotProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-DiscordBotProxy
      PackageType: Zip
      CodeUri: src/Proxy/Core/Proxy.BotHandler
      Handler: Proxy.BotHandler::Proxy.BotHandler.BotProxyFunction::FunctionHandler
      Runtime: dotnet6
      Description: A Lambda function that returns a static string.
      Policies:
        - AWSLambdaBasicExecutionRole
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MainSNSTopic.TopicName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref ProxyApiGateway
      Environment:
        Variables:
          DEBUG_ENABLED: false
          TOPIC_ARN: !Ref MainSNSTopic
          PUBLIC_KEY: !Ref BotPublicKey

  #####################
  #     Lambda & SNS Warmer
  #####################

  #####################
  #     Discord Commands
  #####################
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Search
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Search/
      Handler: Proxy.Command.Search::Proxy.Command.SearchFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - search
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  ScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Schedule
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Schedule/
      Handler: Proxy.Command.Schedule::Proxy.Command.ScheduleFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - schedule
                - schedulesim
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Status
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Status/
      Handler: Proxy.Command.Status::Proxy.Command.StatusFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - status
      Environment:
        Variables:
          DEBUG_ENABLED: false
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  SubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-Subscribe
      PackageType: Zip
      CodeUri: src/Proxy/Commands/Proxy.Command.Subscribe/
      Handler: Proxy.Command.Subscribe::Proxy.Command.SubscribeFunction::FunctionHandler
      Runtime: dotnet6
      Role: !GetAtt SubscribeFunctionRole.Arn
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - subscribe
                - sub
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  #####################
  #     Event Functions
  #####################
  PingPongFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-PingPong
      PackageType: Zip
      CodeUri: src/Proxy/Events/Proxy.Event.PingPong/
      Handler: Proxy.Event.PingPong::Proxy.Event.PingPongFunction::FunctionHandler
      Runtime: dotnet6
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref MainSNSTopic
            FilterPolicy:
              command:
                - ping

  SchedulePollerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppIdentifier}-SchedulePoller
      PackageType: Zip
      CodeUri: src/Proxy/Events/Proxy.Event.SchedulePoller/
      Handler: Proxy.Event.SchedulePoller::Proxy.Event.SchedulePollerFunction::FunctionHandler
      Runtime: dotnet6
      Role: !GetAtt SchedulePollerFunctionRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DEBUG_ENABLED: true
          ALERT_THRESHOLD: 1440
          DISCORD_BOT_TOKEN: !Ref BotToken
          ESP_AUTH_TOKEN: !Ref EspAuthToken
          S3_ASSET_BUCKET: !Ref S3Bucket

  #####################
  #     Event Rules
  #####################
  DiscordBotProxyWarmerEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Keep bot proxy lambda awake
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ProxyApiGateway}/${Environment}/*/
          Id: DiscordBotProxyWarmerEvent
          Input: '{"data":{"name":"ping"}}'
          HttpParameters:
            HeaderParameters:
              app-warm-ping: true

  SchedulePollerEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Polling event for checking for loadshedding updates
      ScheduleExpression: rate(60 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SchedulePollerFunction.Arn
          Id: SchedulePollerEvent

  SchedulePollerEventPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SchedulePollerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SchedulePollerEvent.Arn

  #####################
  #     Roles
  #####################
  SubscribeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  SchedulePollerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

Outputs:
  ProxyGWEndpoint:
    Description: API Gateway endpoint URL to pass to Discord Application Portal
    Value: !Sub https://${ProxyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
